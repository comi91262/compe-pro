
snippet c
package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

var sc = bufio.NewScanner(os.Stdin)
var wr = bufio.NewWriter(os.Stdout)

func scanInt() int       { sc.Scan(); return parseInt(sc.Bytes()) }
func scanString() string { sc.Scan(); return string(sc.Bytes()) }
func scanFloat() float64 { sc.Scan(); return parseFloat(sc.Bytes()) }
func scanInts(n int) (ints []int) {
	ints = make([]int, n)
	for i := 0; i < n; i++ {
		ints[i] = scanInt()
	}
	return
}
func scanStrings(n int) (st []string) {
	st = make([]string, n)
	for i := 0; i < n; i++ {
		st[i] = scanString()
	}
	return
}
func scanFloats(n int) (fs []float64) {
	fs = make([]float64, n)
	for i := 0; i < n; i++ {
		fs[i] = scanFloat()
	}
	return fs
}

func parseInt(b []byte) (n int) {
	for _, ch := range b {
		ch -= '0'
		if ch <= 9 {
			n = n*10 + int(ch)
		}
	}
	if b[0] == '-' {
		return -n
	}
	return
}

var float64pow10 = []float64{
	1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6,
	1e7, 1e8, 1e9, 1e10, 1e11, 1e12,
	1e13, 1e14, 1e15, 1e16, 1e17, 1e18,
	1e19, 1e20, 1e21, 1e22,
}

func parseFloat(b []byte) float64 {
	f, dot := 0.0, 0
	for i, ch := range b {
		if ch == '.' {
			dot = i + 1
			continue
		}
		if ch -= '0'; ch <= 9 {
			f = f*10 + float64(ch)
		}
	}
	if dot != 0 {
		f /= float64pow10[len(b)-dot]
	}
	if b[0] == '-' {
		return -f
	}
	return f
}

func min(arg ...int) int {
	min := arg[0]
	for _, x := range arg {
		if min > x {
			min = x
		}
	}
	return min
}
func max(arg ...int) int {
	max := arg[0]
	for _, x := range arg {
		if max < x {
			max = x
		}
	}
	return max
}

func main() {
	defer wr.Flush()
	sc.Split(bufio.ScanWords)
	sc.Buffer(make([]byte, 10000), 1001001)
}
endsnippet


snippet "va?r?" "" rb
$1 := scanInt()
endsnippet

snippet "vst|vast|varst" "" rb
$1 := strings.Split(scanString(), "")
endsnippet

snippet "vf|vaf|varf" "" rb
$1 := scanFloat()
endsnippet

snippet "vs" "" rb
$1 := make([]int, $2) 
endsnippet

snippet "vs2" "" rb
$1 := make([][]int, $2)
for i := 0; i < $2; i++ {
    $1[i] = make([]int, $3)
}
endsnippet

snippet m
m := map[$1]int{}
endsnippet

snippet is
$1 := scanInts($2)
endsnippet

snippet is2
$1 := make([][]int, $2)
for i := 0; i < $2; i++ {
	$1[i] = scanInts($3)
}
endsnippet

snippet ist
$1 := make([][]string, $2)
for i := 0; i < $2; i++ {
	$1[i] = strings.Split(scanString(), "")
}
endsnippet

snippet ig
type edge struct {	
	to int
	cost int
}

$1 := make([][]edge, $2)
$3 := make([]int, $5)
$4 := make([]int, $5)
for i := 0; i < $5; i++ {
	$3[i] = scanInt()
	$4[i] = scanInt()
	$3[i]--
	$4[i]--
	g[$3[i]] = append(g[$3[i]], edge{$4[i], 0})
	g[$4[i]] = append(g[$4[i]], edge{$3[i], 0})
}
endsnippet

snippet o
fmt.Fprintf(wr, "%v\n", $1)
endsnippet
snippet o2
fmt.Fprintf(wr, "%v %v\n", $1, $2)
endsnippet

snippet os
for i := 0; i < $1; i++ {
	if i > 0 {
		fmt.Fprintf(wr, "\n")
	}
	row := make([]string, $2)
	for j := 0; j < $2; j++ {
		row[j] = strconv.Itoa($3)
	}
	fmt.Fprintf(wr, "%v", strings.Join(row, " "))
}
endsnippet

snippet yes
fmt.Fprintf(wr, "%v\n", "Yes")
endsnippet

snippet no
fmt.Fprintf(wr, "%v\n", "No")
endsnippet

snippet odp
func printer(a [][]int, limit int) {
	for i := 0; i < len(a); i++ {
		row := ""
		for j := 0; j < len(a[0]); j++ {
			if a[i][j] >= limit {
				row += fmt.Sprintf("%5v", "x")
				continue
			}
			row += fmt.Sprintf("%5v", a[i][j])
		}
		fmt.Fprintf(wr, "%v\n", row)
	}
	fmt.Fprintf(wr, "\n")
}
endsnippet

snippet if
if $1 {

}
endsnippet

snippet el
else {
	$1
}
endsnippet

snippet for
for $1 := 0; $1 < $2; $1++ {
	$3
}
endsnippet

snippet forr
for $1 := range $2 {

}
endsnippet

snippet forf
for i := 0; i < 1<<n; i++ {
	for j := 0; j < n; j++ {
		if i&(1<<j) != 0 {
		}
	}
}
endsnippet

snippet sort
sort.Slice($1, func(i, j int) bool { return $1[i] > $1[j] })
endsnippet


snippet cm
const mod = 1_000_000_000 + 7
endsnippet

snippet abs
func abs(x int) int {
	if x >= 0 {
		return x
	} else {
		return x * -1
	}
}
endsnippet


snippet chmin
func chmin(x *int, y int) {
	*x = min(*x, y)
}
endsnippet
snippet chmax
func chmax(x *int, y int) {
	*x = max(*x, y)
}
endsnippet


snippet min
func min(arg ...int) int {
	min := arg[0]
	for _, x := range arg {
		if min > x {
			min = x
		}
	}
	return min
}
endsnippet

snippet max
func max(arg ...int) int {
	max := arg[0]
	for _, x := range arg {
		if max < x {
			max = x
		}
	}
	return max
}
endsnippet

snippet pow
func pow(a, x int) int {
	r := 1
	for x > 0 {
		if x&1 == 1 {
			r *= a
		}
		a *= a
		x >>= 1
	}
	return r
}
endsnippet

snippet gcd
func gcd(a, b int) int {
	if b == 0 {
		return a
	}
	return gcd(b, a%b)
}
endsnippet

snippet add
func add(arg ...int) (sum int) {
	for i := range arg {
		sum += arg[i]
	}
	return
}
endsnippet

snippet pair
type pair struct {
	first int
	second int
}
endsnippet

snippet stack
type stack []$1

func (s *stack) push(n $1) {
	*s = append(*s, n)
}

func (s *stack) pop() $1 {
	v := (*s)[len(*s)-1]
	(*s) = (*s)[:len(*s)-1]
	return v
}

func (s *stack) front() $1 {
	return (*s)[len(*s)-1]
}

func (s *stack) empty() bool {
	return len(*s) == 0
}
endsnippet

snippet q
type queue []$1

func (q *queue) push(n $1) {
	*q = append(*q, n)
}

func (q *queue) pop() $1 {
	v := (*q)[0]
	(*q) = (*q)[1:]
	return v
}

func (q *queue) front() $1 {
    return (*q)[0]
}

func (q *queue) empty() bool {
	return len(*q) == 0
}
endsnippet

snippet search
sort.Search($1, func(j int) bool { return $2 <= $3 })
endsnippet

snippet fact
func fact(n int) int {
	r := 1
	for n > 0 {
		r *= n
		n--
	}
	return r
}
endsnippet

snippet eq
func eq(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}

	for i := 0; i < len(a); i++ {
		if a[i] != b[i] {
			return false
		}

	}
	return true
}
endsnippet

snippet next
func swap(a []$1, i, j int) {
	a[i], a[j] = a[j], a[i]
}

func reverse(a []$1, i, j int) {
	for k := 0; k < (j-i+1)/2; k++ {
		swap(a, i+k, j-k)
	}
}
func nextPermutation(a []$1) {
	var lastIndex = len(a) - 1

	if lastIndex < 1 {
		return
	}

	var i = lastIndex - 1
	for i >= 0 && a[i] >= a[i+1] {
		i -= 1
	}
	if i < 0 {
		reverse(a, 0, lastIndex)
		return
	}

	var j = lastIndex
	for j > i+1 && a[j] <= a[i] {
		j -= 1
	}

	swap(a, i, j)
	reverse(a, i+1, lastIndex)
}
endsnippet

snippet uf
type UnionFind struct {
	parent []int
	size   []int
}

func (uf *UnionFind) Create(n int) {
	uf.parent = make([]int, n)
	uf.size = make([]int, n)

	for i := 0; i < n; i++ {
		uf.parent[i] = i
		uf.size[i] = 1
	}
}

func (uf *UnionFind) root(x int) int {
	if uf.parent[x] == x {
		return x
	} else {
		uf.parent[x] = uf.root(uf.parent[x])
		return uf.parent[x]
	}
}

func (uf *UnionFind) IsSameRoot(x, y int) bool {
	return uf.root(x) == uf.root(y)
}

func (uf *UnionFind) UniteTree(cx, cy int) {
	x := uf.root(cx)
	y := uf.root(cy)

	if x == y {
		return
	}

	if uf.size[x] > uf.size[y] {
		uf.parent[y] = x
		uf.size[x] += uf.size[y]
	} else {
		uf.parent[x] = y
		uf.size[y] += uf.size[x]
	}
}

func (uf *UnionFind) Size(x int) int {
	return uf.size[uf.root(x)]
}
endsnippet

snippet pq
type QItem interface {
	Less(item QItem) bool
}

type priorityQueueImpl []QItem

func (pqi priorityQueueImpl) Len() int {
	return len(pqi)
}

func (pqi priorityQueueImpl) Less(i, j int) bool {
	return pqi[i].Less(pqi[j])
}

func (pqi priorityQueueImpl) Swap(i, j int) {
	pqi[i], pqi[j] = pqi[j], pqi[i]
}

func (pqi *priorityQueueImpl) Push(x interface{}) {
	item := x.(QItem)
	*pqi = append(*pqi, item)
}

func (pqi *priorityQueueImpl) Pop() interface{} {
	old := *pqi
	n := len(old)
	item := old[n-1]
	*pqi = old[0 : n-1]
	return item
}

type PriorityQueue struct {
	priorityQueueImpl
}

func (pq *PriorityQueue) Push(item QItem) {
	heap.Push(&pq.priorityQueueImpl, item)
}

func (pq *PriorityQueue) Pop() QItem {
	return heap.Pop(&pq.priorityQueueImpl).(QItem)
}

func (pq *PriorityQueue) Front() QItem {
	return pq.priorityQueueImpl[0]
}

func (pq *PriorityQueue) Length() int {
	return pq.priorityQueueImpl.Len()
}

func (pq *PriorityQueue) Empty() bool {
	return pq.priorityQueueImpl.Len() == 0
}

func NewPriorityQueue() *PriorityQueue {
	var pq PriorityQueue
	heap.Init(&pq.priorityQueueImpl)
	return &pq
}

//func (i node) Less(j QItem) bool {
//	return i.dist < j.(node).dist
//}
//type Int int
//func (i Int) Less(j QItem) bool {
//	return i < j.(Int)
//}
endsnippet

snippet nck
type FastNck struct {
	fact    []int
	factInv []int
	prime   int
}

func (table *FastNck) Create(n, p int) {
	table.fact = make([]int, n+1)
	table.factInv = make([]int, n+1)
	table.prime = p

	table.fact[0], table.fact[1] = 1, 1
	table.factInv[0], table.factInv[1] = 1, 1

	inv := make([]int, n+1)
	inv[1] = 1
	for i := 2; i < n+1; i++ {
		table.fact[i] = table.fact[i-1] * i % p
		inv[i] = p - inv[p%i]*(p/i)%p
		table.factInv[i] = table.factInv[i-1] * inv[i] % p
	}
}

func (table *FastNck) Combination(n, k int) int {
	if n < k {
		return 0
	}
	if k == 0 {
		return 1
	}

	return table.fact[n] * (table.factInv[k] * table.factInv[n-k] % table.prime) % table.prime
}
endsnippet

snippet pf
type PrimeFactor struct {
	spf []int
}

func (p *PrimeFactor) Constitute(n int) {
	p.spf = make([]int, n+1)

	for i := 0; i <= n; i++ {
		p.spf[i] = i
	}
	for i := 2; i*i <= n; i++ {
		if p.spf[i] == i {
			for j := i * i; j <= n; j += i {
				if p.spf[j] == j {
					p.spf[j] = i
				}
			}
		}
	}
}

func (p *PrimeFactor) Do(n int) map[int]int {
	var m = map[int]int{}
	for n != 1 {
		m[p.spf[n]]++
		n /= p.spf[n]
	}
	return m
}
endsnippet
