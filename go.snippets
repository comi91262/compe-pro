snippet abs
func abs(x int) int {
	if x >= 0 {
		return x
	} else {
		return x * -1
	}
}
endsnippet

snippet min
func min(arg ...int) int {
	min := arg[0]
	for _, x := range arg {
		if min > x {
			min = x
		}
	}
	return min
}
endsnippet

snippet max
func max(arg ...int) int {
	max := arg[0]
	for _, x := range arg {
		if max < x {
			max = x
		}
	}
	return max
}
endsnippet

snippet is
a := make([]int, n)
endsnippet

snippet iis
var a = make([]int, n)
for i := 0; i < n; i++ {
	fmt.Fscan(reader, &a[i])
}
endsnippet

snippet is2
a := make([][]int, n)
for i := 0; i < n; i++ {
	a[i] = make([]int, n)
}
endsnippet

snippet iis2
a := make([][]int, n)
for i := 0; i < n; i++ {
	a[i] = make([]int, n)
	for j := 0; j < n; j++ {
		fmt.Fscan(reader, &a[i][j])
	}
}
endsnippet

snippet iiv
var n int
fmt.Fscan(reader, &n)
endsnippet

snippet iiv2
var n, q int
fmt.Fscan(reader, &n, &q)
endsnippet

snippet iis
var tmp string
fmt.Fscan(reader, &tmp)
s := strings.Split(tmp, "")
endsnippet

snippet o
fmt.Fprintf(writer, "%v\n", n)
endsnippet

snippet iig
var g = make([][]int, n+1)
var a = make([]int, m+1)
var b = make([]int, m+1)
for i := 1; i < m+1; i++ {
	fmt.Fscan(reader, &a[i], &b[i])
	g[a[i]] = append(g[a[i]], b[i])
	g[b[i]] = append(g[b[i]], a[i])
}
endsnippet

snippet for
for i := 0; i < n; i++ {
}
endsnippet

snippet for2
for i := 0; i < n; i++ {
	for j := 0; j < n; j++ {
	}
}
endsnippet

snippet for3
for i := 0; i < n; i++ {
	for j := 0; j < n; j++ {
		for l := 0; l < n; l++ {
		}
	}
}
endsnippet
